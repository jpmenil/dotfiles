#compdef cloudstack cs

# Complete for a region
__cloudstack_regions() {
    local -a regions
    integer ret=1
    regions=(${${${(M)${(f)~~"$(<~/.cloudstack.ini)"}:#\[*\]}#\[}%\]})
    _describe -t regions "regions" regions "$@" && ret=0
    return ret
}

__cloudstack_caching_policy() {
  oldp=( "$1"(Nmh+12) )     # 12 hours
  (( $#oldp ))
}

__cloudstack_commands() {
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __cloudstack_caching_policy
    fi
    if ( [[ ${+_cloudstack_apis} -eq 0 ]] || _cache_invalid cloudstack_commands) \
        && ! _retrieve_cache cloudstack_commands;
    then
        local -a lines
        lines=(${(f)"$(_call_program commands ${words[1]} $cs_options listApis | jq -r '.api[] | [.name, .description] | @tsv')"})
        _cloudstack_commands=(${lines/$'\t'/:})
        (( $#_cloudstack_commands > 10 )) && _store_cache cloudstack_commands _cloudstack_commands
    fi

    _describe -t cloudstack-commands "cloudstack command" _cloudstack_commands
}

__cloudstack_arguments() {
    local cache_policy
    local command=$words[2]
    local cache=_cloudstack_arguments_$command
    integer ret=1
    local -a cloudstack_arguments

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __cloudstack_caching_policy
    fi
    if ( [[ ${(P)+cache} -eq 0 ]] || _cache_invalid ${cache#_}) \
        && ! _retrieve_cache ${cache#_};
    then
        local -a lines
        lines=(${(f)"$(_call_program commands ${words[1]} $cs_options listApis name=$command | jq -r '.api[].params[] | [.name, .description | if (. | length) > 60 then .[:60] + "..." else . end] | @tsv')"})
        _cloudstack_arguments=(${lines/$'\t'/:})
        (( $#_cloudstack_arguments > 1 )) && _store_cache ${cache#_} _cloudstack_arguments
    fi

    if compset -P '*='; then
        _message 'value' && ret=0
    else
        _describe -t cloudstack-arguments "$command argument" _cloudstack_arguments -qS = && ret=0
    fi
    return $ret
}

_cloudstack() {
    local curcontext="$curcontext" state line
    integer ret=1
    typeset -A opt_args

    _arguments -C \
        "--async[Don't poll asynchronous job]" \
        "--post[Use POST instead of GET]" \
        "--region=-[Cloudstack region to use]:region:->region" \
        "1: :->command" \
        "*: :->argument" && ret=0

    local region=${opt_args[--region]}
    local cs_options="${region:+--region=$region}"

    case $state in
        (region)
            __cloudstack_regions && ret=0
            ;;
        (command)
            __cloudstack_commands && ret=0
            ;;
        (argument)
            curcontext=${curcontext%:*:*}:cloudstack-$words[1]:
            __cloudstack_arguments && ret=0
            ;;
    esac

    return ret
}

_cloudstack "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: ft=zsh sw=4 ts=4 et
