#compdef snmpwalk=snmpcmd snmpget=snmpcmd snmpbulkwalk=snmpcmd snmpbulkget=snmpcmd
#
# Completion for snmp* cmd. Stolen from:
#    2006 Andrew J Cosgriff
#    http://polydistortion.net/
#    http://polydistortion.net/sw/zsh/_snmpcmd
#    http://polydistortion.net/monkey/archives/2006/07/16/003735.html
#
# With some other modifications

_snmptranslate () {
    local arg
    local next
    local -a additional
    next=0
    for arg in $words; do
	case $arg in
	    "-m"|"-M")
		next=1
		additional=($additional $arg)
		;;
	    "-m"*|"-M"*)
		additional=($additional $arg)
		;;
	    *)
		if (( next == 1 )); then
		    additional=($additional $arg)
		    next=0
		fi
		;;
	esac
    done
    (( next == 0 )) || additional=("${(@)additional[1,$#additional - 1]}")
    snmptranslate $additional "$@"
}

_snmp_get_mibs () {
    local -a mibs
    local -a mib
    local mibdirs
    local dir

    mibdirs=$(_snmptranslate -Dinit_mib 2>&1 | \
	sed -n "s/^init_mib: Seen MIBDIRS: Looking in '\(.*\)' for mib dirs ...$/\1/p")
    for dir in ${(ws+:+)mibdirs}; do
	mibs=($mibs $dir/*(.))
    done
    mibs=(${mibs[@]:t:r})

    _describe -t mibs "MIB" mibs -qS :
}

_snmp_get_object() {
    local obj
    local -a objects
    objects=(${${(M)${(@f)"$(_snmptranslate -Ta 2> /dev/null)"}:#* OBJECT IDENTIFIER *}%% *})
    _describe -t objects "objects" objects
}

_snmpcmd () {
    local context state line
    local -a specific
    typeset -A opt_args

    case ${words[1]} in
	snmpwalk)
	    specific=(
		'-Cc[do not check if returned OIDs are increasing]'
		'-CE[end the walk at the specified OID]:OID:->object'
		'-Ci[include OID in search range]'
		'-CI[don'"'"'t retrieve OID when walk is empty]'
		'-Cp[print the number of variables found]'
		'-It[Display wall-clock time to complete the request]'
	    )
	    ;;
	snmpbulkwalk)
	    specific=(
		'-Cc[do not check if returned OIDs are increasing]'
		'-Ci[include OID in search range]'
		'-Cp[print the number of variables found]'
		'-Cn-[non-repeaters]:value:(0 1 2 3 5 10)'
		'-Cr-[max repetitions]:value:(5 10 20 50 100)'
	    )
	    ;;
	snmpbulkget)
	    specific=(
		'-Cn-[non-repeaters]:value:(0 1 2 3 5 10)'
		'-Cr-[max repetitions]:value:(5 10 20 50 100)'
	    )
	    ;;
    esac

    _arguments -A \
	{-h,--help}'[show help]' \
	'-H[display configuration file directives understood]' \
	'-v+[SNMP version to use]:version:(1 2c 3)' \
	{-V,--version}'[display package version number]' \
	'-c+[set the community string]:community string:(public private)' \
	'-a+[set authentcation protocol]:protocol:(MD5 SHA)' \
	'-A+[set authentication protocol pass phrase]:passphrase: ' \
	'-e+[set security engine ID]:engine-id: ' \
	'-E+[set context engine ID]:engine-id: ' \
	'-l+[set security level]:security level:(noAuthNoPriv authNoPriv authPriv)' \
	'-n+[set context name]:context: ' \
	'-u+[set security name]:user:_users' \
	'-x+[set privacy protocol]:protocol:(DES AES)' \
	'-X+[set privacy protocol pass phrase]:passphrase: ' \
	'-Z+[set destination engine boots/time]:boots,time: ' \
	'-r+[set the number of retries]:retries:(0 1 2 3 5 10)' \
	'-t+[set the request timeout (in seconds)]:timeout:(0 1 2 3 5 10)' \
	'-d[dump input/output packets in hexadecimal]' \
	'*-D+[turn on debugging output for the specified tokens]:token: ' \
	'*-m+[MIB file to use]:mib:->mib' \
	'*-M+[directory to search for MIBs]:directory:->mibdir' \
	'-Pu[allow the use of underlines in MIB symbols]' \
	'-Pc[disallow the use of "--" to terminate comments in MIBs]' \
	'-Pd[save the DESCRIPTIONs of the MIB objects]' \
	'-Pe[disable errors when MIB symbols conflict]' \
	'-Pw[enable warnings when MIB symbols conflict]' \
	'-PW[enable detailed warnings when MIB symbols conflict]' \
	'-PR[replace MIB symbols from latest module]' \
	'-O0[print leading 0 for single-digit hex characters]' \
	'-Oa[print all strings in ascii format]' \
	'-Ob[do not break OID indexes down]' \
	'-Oe[print enums numerically]' \
	'-OE[escape quotes in string indices]' \
	'-Of[print full OIDs on output]' \
	'-On[print OIDs numerically]' \
	'-Oq[quick print for easier parsing]' \
	'-OQ[quick print with equal-signs]' \
	'-Os[print only last symbolic element of OID]' \
	'-OS[print MIB module-id plus last element]' \
	'-Ot[print timeticks unparsed as numeric integers]' \
	'-OT[print human-readable text along with hex strings]' \
	'-Ou[print OIDs using UCD-style prefix suppression]' \
	"-OU[don't print units]" \
	'-Ov[print values only (not OID = value)]' \
	'-Ox[print all strings in hex format]' \
	'-OX[extended index format]' \
	'-Ib[do best/regex matching to find a MIB node]' \
	"-Ih[don't apply DISPLAY-HINTs]" \
	'-Ir[do not check values for range/type legality]' \
	'-IR[do random access to OID labels]' \
	'-Iu[top-level OIDs must have '"'.'"' prefix (UCD-style)]' \
	'-Is+[Append all textual OIDs with suffix before parsing]:suffix: ' \
	'-IS+[Append all textual OIDs with prefix before parsing]:prefix: ' \
	'-Le[log to standard error]' \
	'-Lo[log to standard output]' \
	"-Ln[don't log at all]" \
	'-Lf+[log to the specified file]:file:_files' \
	'-Ls+[log to the syslog (via the specified facility)]:facility: ' \
	$specific \
	':hosts:_hosts' \
	'*:object:->object'

    while [[ -n "$state" ]]; do
	lstate="$state"
	state=''

	case "$lstate" in
	    mib)
		if compset -P '*:'; then
		    _snmp_get_mibs
		elif compset -P '+'; then
		    _snmp_get_mibs
		else
		    _snmp_get_mibs
		fi
		;;
	    mibdir)
		if compset -P '*:'; then
		    _directories
		elif compset -P '+'; then
		    _directories
		else
		    _directories
		fi
		;;
	    object)
		_snmp_get_object
		;;
	esac
    done
}

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: t
# sh-basic-offset: 4
# End:
