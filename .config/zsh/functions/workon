# -*- sh -*-
# Description
# ===========
#
# Switch to another environment.
#
# An environment is either a virtualenv-based environment, a Docker
# image or a Docker container. Virtualenv-based environments are
# expected to be in $WORKON_HOME.

local env=$1
local -a venv dimages dcontainers
venv=($WORKON_HOME/*/bin/activate(.N:h:h:ft))
(( $+commands[docker] )) && [[ -w /var/run/docker.sock ]] && {
    dimages=( $(docker images | awk '(NR > 1 && $1 !~ /^</){printf("%s:%s\n", $1,$2)}') )
    dcontainers=( $(docker ps | awk '(NR > 1){split($NF,names,/,/); for (i in names) printf("%s\n",names[i])}') )
}

# No parameters, list available environment
[[ -n $env ]] || {
    print "INFO: List of available environments:"
    for env in $venv; do
        print " - [virtualenv] $env"
    done
    for image in $dimages; do
        print " - [docker    ] $image"
    done
    for container in $dcontainers; do
        print " - [docker    ] $container"
    done
    return 0
}

[[ $env == "." ]] && env=${PWD:t}

# Compile sudo if needed
local sudo=$ZSH/run/u/$HOST-$UID/sudo
function compile_sudo() {
    zmodload -F zsh/stat b:zstat
    zmodload zsh/datetime
    if [[ ! -f $sudo ]] || \
           (( $(zstat +mtime $ZSH/misc/sudo.c) > $(zstat +mtime $sudo) )) && \
               (( $+commands[gcc] )) ; then
        gcc -Wall -static $ZSH/misc/sudo.c -o $sudo
    fi
}

# Docker stuff
local setupuser="
for SHELL in ${SHELL}-static $SHELL /bin/bash /bin/sh; do
    [ ! -x \$SHELL ] || break
done
if ! id $USER > /dev/null 2> /dev/null; then
    echo $(getent passwd $(id -u)) >> /etc/passwd
    echo $(getent group $(id -g)) >> /etc/group
    # Put sudo configuration even when no sudo (in case it gets installed later)
    mkdir -p /etc/sudoers.d
    echo \"$USER ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/$USER
    chmod 0440 /etc/sudoers.d/$USER
    [ -x /usr/bin/sudo ] || [ ! -x $sudo ] ||  {
        cp $sudo /usr/bin/_sudo
        chown root:$(id -gn) /usr/bin/_sudo
        chmod 4750 /usr/bin/_sudo
        cat <<'EOF' > /usr/bin/sudo
#!/bin/sh
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin

exec /usr/bin/_sudo \"\$@\"
EOF
        chmod +x /usr/bin/sudo
    }
fi
[ ! -f /etc/nsswitch.conf ] || sed -i 's/ sss//' /etc/nsswitch.conf
"

# Docker images
[[ ${dimages[(r)$env]} == $env ]] && {
    local image=${env}
    local tmp=$(mktemp -d)
    compile_sudo
    <<EOF > $tmp/start
#!/bin/sh
$setupuser
exec env HOME=$HOME TERM=$TERM DOCKER_CHROOT_NAME=$env SHLVL= \
     $sudo -u $(id -u) -g $(id -g) -c '$PWD' \$SHELL -i -l
EOF
    (( $+commands[tic] )) && (( $+commands[infocmp] )) && infocmp $TERM | tic -
    docker run -t -i \
           $([[ -d /usr/share/zsh ]] && print -- -v /usr/share/zsh:/usr/share/zsh-static:ro) \
           $([[ -x ${SHELL}-static ]] && print -- -v ${SHELL}-static:${SHELL}-static:ro) \
           -v $HOME:$HOME \
           -v $tmp:$tmp \
           -w $PWD \
           -u root \
           --rm \
           -h ${${${image##*/}:gs/:/-}:gs/./-} \
           --entrypoint /bin/sh \
           $image $tmp/start
    local ret=$?
    rm -f $tmp/start && rmdir $tmp
    return $ret
}

# Docker containers
[[ ${dcontainers[(r)$env]} == $env ]] && {
    local id=$(docker inspect --format '{{.State.Pid}}' $env)

    # We need to mount $HOME inside the container, that's quite
    # hacky: we get the device we need to mount, we mount it
    # somewhere, then bind mount the home directory in the right
    # place. All this with elevated privileges. We also create our
    # user, with sudo rights. Most inspiration comes from here:
    #  http://blog.dehacked.net/lxc-getting-mounts-into-a-running-container/
    #
    # Also, from Docker 0.9, see:
    #  http://jpetazzo.github.io/2014/03/23/lxc-attach-nsinit-nsenter-docker-0-9/
    #  http://www.sebastien-han.fr/blog/2014/01/27/access-a-container-without-ssh/
    #
    # From Docker 1.3, see `docker exec'.
    #
    # So, this needs nsenter which needs a recent util-linux.
    local homemnt=${${(f)"$(df --output=target $HOME)"}[-1]}
    local homedev=$(readlink -f ${${(f)"$(df --output=source $HOME)"}[-1]})
    local enter=/tmp/nsenter-$RANDOM-$$-$UID
    compile_sudo
    ${(%):-%(!..sudo)} =nsenter -m -t $id -- /bin/sh -e <<EOF
#!/bin/sh
if ! mountpoint $HOME > /dev/null 2>/dev/null; then
    tmp=\$(mktemp -d)
    mkdir -p ${HOME}
    [ -b /dev/home-directory ] || \
        mknod /dev/home-directory b $(($(stat -c "0x%t" ${homedev}))) $(($(stat -c "0x%T" ${homedev})))
    mount -n /dev/home-directory \$tmp
    rm /dev/home-directory
    mount -n --bind \$tmp/${HOME#$homemnt} $HOME
    umount -n \$tmp 2> /dev/null
    rmdir \$tmp
fi

$setupuser

# Setup a command to enter this environment
> $enter echo exec env HOME=$HOME TERM=$TERM DOCKER_CHROOT_NAME=$env SHLVL= \
  $sudo -u $(id -g) -g $(id -g) -c '"'"$PWD"'"' \$SHELL -i -l

EOF
    local ret=$?
    [[ $ret -eq 0 ]] && {
        (( $+commands[tic] )) && (( $+commands[infocmp] )) && infocmp $TERM | tic -
        ${(%):-%(!..sudo)} =nsenter -m -u -i -n -p -w$HOME -t $id -- /bin/sh $enter
        ret=$?
    }
    return $ret
}

function save() {
    local v
    for v ($@) {
            _saved_environment[$v]=${${(e):-\$$v}}
        }
}

function restore() {
    local v
    for v (${(k)_saved_environment}) {
            unset $v
            [[ -z ${_saved_environment[$v]} ]] || export $v=${_saved_environment[$v]}
        }
}

# If in another virtualenv, call deactivate
(( $+functions[deactivate_node] )) && deactivate_node
(( $+functions[deactivate] )) && {
    deactivate
    restore
}

# Virtualenv
[[ ${venv[(r)$env]} == $env ]] && {
    local activate="$WORKON_HOME/$env/bin/activate"
    local VIRTUAL_ENV_DISABLE_PROMPT=1
    local NODE_VIRTUAL_ENV_DISABLE_PROMPT=1
    source $activate

    typeset -Ag _saved_environment

    # Gems.
    # GEM_HOME is where gems will be installed.
    # GEM_PATH is where gems are searched
    save GEM_HOME GEM_PATH
    export GEM_HOME=$VIRTUAL_ENV/gems
    export GEM_PATH=$GEM_HOME
    path=( $GEM_HOME/bin $path )

    # Go
    save GOPATH
    export GOPATH=$VIRTUAL_ENV/go
    path=( $GOPATH/bin $path)

    # C (install with ./configure --prefix=$VIRTUAL_ENV)
    save LD_LIBRARY_PATH PKG_CONFIG_PATH
    export LD_LIBRARY_PATH=$VIRTUAL_ENV/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
    export PKG_CONFIG_PATH=$VIRTUAL_ENV/lib/pkgconfig
    path=( $VIRTUAL_ENV/sbin $path )

    # OCaml (through OPAM)
    (( $+commands[opam] )) && {
        save OPAMROOT MANPATH PERL5LIB CAML_LD_LIBRARY_PATH OCAML_TOPLEVEL_PATH
        export OPAMROOT=$VIRTUAL_ENV/opam
        [[ -d $OPAMROOT ]] && \
            eval $(opam config env)
    }

    # node.js workaround
    [[ -z $NPM_CONFIG_PREFIX ]] || {
        save npm_config_prefix
        export npm_config_prefix=$NPM_CONFIG_PREFIX
    }

    rehash
    return
}

[[ $env == "-" ]] || {
    print "ERROR: environment $env does not exist"
    return 2
}
