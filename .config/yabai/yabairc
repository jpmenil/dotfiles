#!/usr/bin/env sh

# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password
#
# see this wiki page for information:
#  - https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
#
#yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
#sudo yabai --load-sa

# global settings
yabai -m config mouse_follows_focus          off
yabai -m config focus_follows_mouse          autofocus

yabai -m config window_placement             second_child
yabai -m config window_topmost               off

yabai -m config window_opacity               off
#yabai -m config window_opacity_duration      0.0
yabai -m config window_shadow                on

yabai -m config active_window_opacity        1.0
yabai -m config normal_window_opacity        0.90
yabai -m config split_ratio                  0.50
yabai -m config auto_balance                 off

yabai -m config window_border                off
yabai -m config window_border_width          6

yabai -m config active_window_border_color   0xff775759
yabai -m config normal_window_border_color   0xff555555
yabai -m config insert_feedback_color        0xffd75f5f

yabai -m config mouse_modifier               fn
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config mouse_drop_action            swap

# general space settings
yabai -m config layout                       bsp
yabai -m config top_padding                  0
yabai -m config bottom_padding               0
yabai -m config left_padding                 0
yabai -m config right_padding                0
yabai -m config window_gap                   0

# spaces
#num_spaces=9
#displays=$(yabai -m query --displays | jq length)

# if [ `yabai -m query --spaces | jq length` -ne "$num_spaces" ]; then
#     for i in $(seq 1 "$num_spaces")
#     do
#         yabai -m space "$i" --create
#     done
# fi

yabai -m space 1 --label weechat
yabai -m space 2 --label s2
yabai -m space 3 --label s3
yabai -m space 4 --label s4
yabai -m space 5 --label s5
yabai -m space 6 --label chrome
yabai -m space 7 --label slack
yabai -m space 8 --label mutt
yabai -m space 9 --label firefox

if [ `yabai -m query --displays | jq length` -eq 2 ]; then
    for i in $(seq 2 $"num_spaces")
    do
        yabai -m space "$i" --display 2
    done
fi

# window rules
yabai -m rule --add title="^neomutt" space=mutt
yabai -m rule --add app="^Firefox$" space=firefox title="Opening.+" manage=off
yabai -m rule --add app="^Google Chrome$" space=chrome title="Opening.+" manage=off
yabai -m rule --add app="^Slack$" space=slack

echo "yabai configuration loaded.."

yabai -m signal --add event=mission_control_exit action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=display_added action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=display_removed action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_created action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_destroyed action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_focused action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_moved action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_resized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_minimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_deminimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
